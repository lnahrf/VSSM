let vssm;const createState=(t,e)=>new VSSMState(t,e),getVSSM=()=>vssm.combinedState,createVSSM=t=>vssm=new VSSM(t);class VSSM{constructor(t){VSSM.validateUniqueNames(t),this.combinedState=VSSM.initState(t)}static initState=t=>{let e={};for(var[a,s]of Object.entries(t))e[a]=s.proxy;return e};static validateUniqueNames=t=>{var e,a,t=Object.values(t).map(t=>t.name).reduce((t,e)=>(t[e]?++t[e]:t[e]=1,t),{});for([e,a]of Object.entries(t))if(1<a)throw new Error(`VSSM Error: Failed to define global state. State names must be unique, change or remove the duplicate of "${e}"`)}}class VSSMParam{constructor(t,e,a){this.value=t,this.key=e,this.event=a,this.tasks=[],this.performTasks=()=>this.tasks.map(t=>t()),this.proxy=new Proxy({value:this.value},{set:(t,e,a)=>{if(e in t)return t[e]=a,document.dispatchEvent(this.event),t},get:t=>t.value})}}class VSSMState{constructor(t,e){this.name=t,this.origin={...e},this.mutationEvents=VSSMState.defineMutationEvents(this.origin,this.name),this.params=VSSMState.initParams(e,this.mutationEvents),this.watchParam=(t,e)=>{VSSMState.validateParamExistence(this.params,t);const a=this.params[t];document.removeEventListener(a.event.type,a.performTasks),a.tasks.push(e),document.addEventListener(a.event.type,a.performTasks)},this.proxy=new Proxy(this,{set:(t,e,a)=>("function"==typeof a?this.watchParam(e,a):(VSSMState.validateParamExistence(this.params,e),this.params[e].proxy.value=a),t),get:(t,e)=>(VSSMState.validateParamExistence(this.params,e),this.params[e].proxy.value)})}static defineMutationEvents=(t,e)=>{const a={};for(const s of Object.keys(t))a[s]=new Event(VSSMState.resolveEventPath(e+"."+s));return a};static initParams=(t,e)=>{const a={};for(var[s,r]of Object.entries(t))a[s]=new VSSMParam(r,s,e[s]);return a};static resolveEventPath=t=>"vssm."+t;static validateParamExistence=(t,e)=>{if(!t[e])throw new Error("VSSM Error: Trying to watch, get or set unresolved: "+e)}}export{createState,getVSSM,createVSSM};