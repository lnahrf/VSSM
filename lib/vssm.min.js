let vssm;class VSSM{constructor(t){this.combinedState=(t=>{let e={};for(var[s,a]of Object.entries(t))e[s]=a.proxy;return e})(t)}}class VSSMState{static defineParents=(t,e="")=>{for(var[s,a]of Object.entries(t))"object"==typeof a&&(a.parent=e,VSSMState.defineParents(a,s))};static defineMutationEvents=(t,e)=>{const s={};for(const a of Object.keys(t))s[a]=new Event(VSSMState.resolveEventPath(e+"."+a));return s};static initParams=(t,e,s)=>{const a={};for(var[n,r]of Object.entries(t))a[n]=new VSSMParam(r,n,e,s[n]);return a};static resolveEventPath=t=>"vssm."+t;constructor(t,e){this.name=t,this.origin={...e},VSSMState.defineParents(this.origin),this.mutationEvents=VSSMState.defineMutationEvents(this.origin,this.name),this.params=VSSMState.initParams(e,this.name,this.mutationEvents),this.watchParam=(t,e)=>{const s=this.params[t];t=VSSMState.resolveEventPath(s.parent+"."+s.key);document.removeEventListener(t,s.performTasks),s.tasks.push(e),document.addEventListener(t,s.performTasks)},this.proxy=new Proxy(this,{set:(t,e,s)=>("function"==typeof s?this.watchParam(e,s):this.params[e].proxy.value=s,t),get:(t,e)=>this.params[e].proxy.value})}}class VSSMParam{constructor(t,e,s,a){this.value=t,this.key=e,this.parent=s,this.event=a,this.tasks=[],this.performTasks=()=>this.tasks.map(t=>t()),this.proxy=new Proxy({value:this.value},{set:(t,e,s)=>{if(e in t)return t[e]=s,document.dispatchEvent(this.event),t},get:t=>t.value})}}const createVSSM=t=>vssm=new VSSM(t),createState=(t,e)=>new VSSMState(t,e),getVSSM=()=>vssm.combinedState;export{createVSSM,createState,getVSSM};